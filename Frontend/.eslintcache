[{"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\index.js":"1","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\App.js":"2","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Table.js":"3","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Form.js":"4","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Checkbox.js":"5","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Modal.js":"6"},{"size":169,"mtime":1613002112074,"results":"7","hashOfConfig":"8"},{"size":4609,"mtime":1614455470645,"results":"9","hashOfConfig":"8"},{"size":2114,"mtime":1614454992495,"results":"10","hashOfConfig":"8"},{"size":2471,"mtime":1614454745700,"results":"11","hashOfConfig":"8"},{"size":478,"mtime":1614454745699,"results":"12","hashOfConfig":"8"},{"size":3018,"mtime":1614455691986,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"d01q7l",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\index.js",[],["30","31"],"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\App.js",["32","33"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Table from './Table'\r\nimport Form from './Form'\r\nimport MyModal from './Modal';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n\r\nclass App extends Component {\r\n\t  state = {\r\n        characters: [],\r\n        completed:[],\r\n        showModal: false,\r\n        setCharacter: false, // tells modal.js it has a new character\r\n        modalCharacter: null\r\n     }\r\n\r\n\r\n   componentDidMount() {\r\n      axios.get('http://localhost:5000/users')\r\n         .then(res => {\r\n            const characters = res.data.users_list;\r\n            this.setState({ characters });\r\n         })\r\n         .catch(function (error) {\r\n            //Not handling the error. Just logging into the console.\r\n            console.log(error);\r\n         });\r\n   }\r\n\r\n   removeCharacter = index => {\r\n      const { characters } = this.state\r\n      let character = characters[index];\r\n\r\n      if(this.makeDeleteCall(character)){\r\n          this.setState({\r\n              characters: characters.filter((character, i) => {\r\n                  return i !== index\r\n              }),\r\n          })\r\n      }\r\n   }\r\n\r\n   openModal = index => {\r\n      const { characters } = this.state\r\n      this.setState({ modalCharacter: characters[index] });\r\n      this.setState({ showModal: true });\r\n      this.setState({ setCharacter : true });\r\n   }\r\n\r\n   closeModal = () => {\r\n      this.setState({ modalCharacter: null });\r\n      this.setState({ showModal: false});\r\n   }\r\n\r\n   handleModalSubmit = character => {\r\n      // this.handleSubmit(character);\r\n      this.updateCharacter(character)\r\n      this.closeModal()\r\n   }\r\n\r\n   updateCharacter = character => {\r\n      const { characters } = this.state\r\n\r\n      if(this.makePutCall(character)){\r\n         var updatedCharacters = []\r\n         for (let i=0; i<characters.length; i++) { // get an updated character list\r\n            if (character._id == characters[i]._id) {\r\n               updatedCharacters.push(character)\r\n            }\r\n            else {\r\n               updatedCharacters.push(characters[i])\r\n            }\r\n         }\r\n         this.setState({\r\n            characters: updatedCharacters\r\n         })\r\n      }\r\n   }\r\n\r\n   makePutCall(character){\r\n      return axios.put('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   makeDeleteCall(character){\r\n      console.log(character);\r\n      console.log({ data: { _id: character._id } });\r\n      return axios.delete('http://localhost:5000/users', { data: { _id: character._id } })\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response === 200;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return false;\r\n         });\r\n   }\r\n\r\n   handleSubmit = character => {\r\n      this.makePostCall(character).then( callResult => {\r\n         if (callResult.status === 201) {\r\n            character = callResult.data;\r\n            console.log(character);\r\n            this.setState({ characters: [...this.state.characters, character] });\r\n         }\r\n      });\r\n   }\r\n\r\n   handleCompletedSubmit = complete => {\r\n      this.setState({ completed: [...this.state.completed, complete]});\r\n   }\r\n\r\n\r\n   makePostCall(character){\r\n      return axios.post('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   render() {\r\n        const { characters, showModal, setCharacter, modalCharacter } = this.state\r\n\r\n        let x = modalCharacter\r\n        return (\r\n             <div className=\"container\">\r\n               <Table characterData={characters} removeCharacter={this.removeCharacter} updateCharacter={this.updateCharacter}  openModal={this.openModal} />\r\n               <Form handleSubmit={this.handleSubmit} />\r\n              <MyModal show={showModal} newCharacter={setCharacter} handleModalSubmit={this.handleModalSubmit} closeModal={this.closeModal} \r\n              modalCharacter={modalCharacter}/>\r\n             </div>\r\n             )\r\n   }\r\n\r\n}\r\n\r\n\r\nexport default App\r\n               // task=x ? modalCharacter.task : '' desc=x ? modalCharacter.desc : '' priority=x ? modalCharacter.priority : '' _id=x ? modalCharacter._id: ''","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Table.js",["34"],"import React, { Component } from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport Checkbox from './Checkbox'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\n\r\nconst TableHeader = () => {\r\n\t  return (\r\n\t\t      <thead>\r\n\t\t        <tr>\r\n              <th>Select</th>\r\n\t      <th>Tasks</th>\r\n              <th>Description</th>\r\n              <th>Type</th>\r\n              <th style={{width: '10%'}}>Priority</th>\r\n              <th></th>\r\n\t\t        </tr>\r\n\t\t      </thead>\r\n\t\t    ) // style width ensures the priority bar displays correctly\r\n}\r\n\r\nconst TableBody = props => {\r\n\t  const rows = props.characterData.map((row, index) => {\r\n      let priBar = parseInt(row.priority) * 10\r\n      let priVar = (priBar > 66 ? \"danger\" : (priBar > 33 ? \"warning\" : \"success\"))\r\n\t\t      return (\r\n               <tr key={index}>\r\n                 <td>\r\n                   <Checkbox />\r\n                 </td>\r\n                 <td>{row.task}</td>\r\n                 <td>{row.desc}</td>\r\n                 <td>{row.type}</td>\r\n                 <td><ProgressBar striped variant={priVar} now={priBar} /></td>\r\n                 <td>\r\n                  <Dropdown>\r\n                      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                          Edit\r\n                      </Dropdown.Toggle>\r\n\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => props.removeCharacter(index)}>Delete</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => props.openModal(index)}>Edit Task</Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                 </td>\r\n               </tr>\r\n\t\t\t          )\r\n\t\t    })\r\n\r\n\t  return <tbody>{rows}</tbody>\r\n}\r\n\r\nconst Table = props => {\r\n     const { characterData, removeCharacter, openModal} = props\r\n\r\n     return (\r\n            <table style={{width: '100%'}}>\r\n              <TableHeader />\r\n              <TableBody characterData={characterData} removeCharacter={removeCharacter} openModal={openModal}/>\r\n            </table>\r\n          )\r\n}\r\n\r\nexport default Table\r\n","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Form.js",["35"],"import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n     initialState = {\r\n            task: '',\r\n            desc: '',\r\n            type: '',\r\n            priority: '',\r\n          }\r\n\r\n     state = this.initialState\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n             })\r\n   }\r\n\r\n    submitForm = () => {\r\n      let nPriority = parseInt(this.state.priority)\r\n      if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n         alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n   }\r\n\r\n\r\n    render() {\r\n        const { task, desc, priority } = this.state;\r\n\r\n        return (\r\n               <form>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={task}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={desc}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"type\">Type</label>\r\n                 <select name=\"type\" onChange={this.handleChange}>\r\n                   <option selected disabled>Please choose...</option>  <option name=\"type\" id=\"type\" value=\"School\">School</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Work\">Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Errand\">Errand</option>\r\n                   <option name=\"type\" id=\"type\" value=\"House Work\">House Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Other\">Other</option>\r\n                 </select> \r\n\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={priority}\r\n                   onChange={this.handleChange} />\r\n                  <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n               </form>\r\n             );\r\n   }\r\n\r\n}\r\n\r\nexport default Form\r\n","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Checkbox.js",[],"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Modal.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":68,"column":31,"nodeType":"43","messageId":"44","endLine":68,"endColumn":33},{"ruleId":"45","severity":1,"message":"46","line":137,"column":13,"nodeType":"47","messageId":"48","endLine":137,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":23,"column":11,"nodeType":"43","messageId":"52","endLine":23,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":34,"column":10,"nodeType":"43","messageId":"52","endLine":34,"endColumn":27},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'Component' is defined but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation"]