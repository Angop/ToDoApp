[{"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js":"1","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js":"2","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js":"3","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js":"4","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js":"5"},{"size":169,"mtime":1613525475045,"results":"6","hashOfConfig":"7"},{"size":6405,"mtime":1615107154913,"results":"8","hashOfConfig":"7"},{"size":4125,"mtime":1615121159199,"results":"9","hashOfConfig":"7"},{"size":5208,"mtime":1615081452813,"results":"10","hashOfConfig":"7"},{"size":3288,"mtime":1615080635283,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1if9kux",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js",[],["26","27"],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js",["28","29"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Table from './Table'\r\nimport Form from './Form'\r\nimport MyModal from './Modal';\r\nimport logo from './logo.jpg';\r\nimport \"./styles.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nclass App extends Component {\r\n\t  state = {\r\n        characters: [],\r\n        completed:[],\r\n        showModal: false,\r\n        modalCharacter: null\r\n     }\r\n\r\n\r\n   componentDidMount() {\r\n      axios.get('http://localhost:5000/users')\r\n         .then(res => {\r\n            const characters = res.data.users_list;\r\n            this.setState({ characters });\r\n         })\r\n         .catch(function (error) {\r\n            //Not handling the error. Just logging into the console.\r\n            console.log(error);\r\n         });\r\n   }\r\n\r\n   removeCharacter = index => {\r\n      const { characters } = this.state\r\n      let character = characters[index];\r\n\r\n      if(this.makeDeleteCall(character)){\r\n          this.setState({\r\n              characters: characters.filter((character, i) => {\r\n                  return i !== index\r\n              }),\r\n          })\r\n      }\r\n   }\r\n\r\n   openModal = index => {\r\n      if (index > 0) {\r\n         const { characters } = this.state\r\n         this.setState({ modalCharacter: characters[index] });\r\n         this.setState({ showModal: true });\r\n      }\r\n   }\r\n\r\n   newCharacter = () => { // opens modal for a new character\r\n      this.setState({ modalCharacter: null });\r\n      this.setState({ showModal: true });\r\n   }\r\n\r\n   closeModal = () => {\r\n      this.setState({ modalCharacter: null });\r\n      this.setState({ showModal: false});\r\n   }\r\n\r\n   handleModalSubmit = character => {\r\n      // this.handleSubmit(character);\r\n      console.log(character)\r\n      if (this.state.modalCharacter) { // updating existing character\r\n         this.updateCharacter(character)\r\n      }\r\n      else { // creating a new character\r\n         this.makePostCall(character).then( callResult => {\r\n            if (callResult.status === 201) {\r\n               character = callResult.data;\r\n               console.log(character);\r\n               this.setState({ characters: [...this.state.characters, character] });\r\n            }\r\n         });\r\n      }\r\n      this.closeModal()\r\n   }\r\n\r\n   updateCharacter = character => {\r\n      const { characters } = this.state\r\n\r\n      if(this.makePutCall(character)){\r\n         var updatedCharacters = []\r\n         for (let i=0; i<characters.length; i++) { // get an updated character list\r\n            if (character._id === characters[i]._id) {\r\n               updatedCharacters.push(character)\r\n            }\r\n            else {\r\n               updatedCharacters.push(characters[i])\r\n            }\r\n         }\r\n         console.log(characters)\r\n         console.log(updatedCharacters)\r\n         this.setState({\r\n            characters: updatedCharacters\r\n         })\r\n      }\r\n   }\r\n\r\n   makePutCall(character){\r\n      return axios.put('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   makeDeleteCall(character){\r\n      console.log(character);\r\n      console.log({ data: { _id: character._id } });\r\n      return axios.delete('http://localhost:5000/users', { data: { _id: character._id } })\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response === 200;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return false;\r\n         });\r\n   }\r\n\r\n   handleSubmit = character => {\r\n      console.log(character)\r\n      this.makePostCall(character).then( callResult => {\r\n         if (callResult.status === 201) {\r\n            character = callResult.data;\r\n            console.log(character);\r\n            this.setState({ characters: [...this.state.characters, character] });\r\n         }\r\n      });\r\n   }\r\n\r\n   editChecked = index => {\r\n      const { characters } = this.state\r\n      let character = characters[index]; \r\n      character.checked = !character.checked\r\n\r\n      console.log(character)\r\n      \r\n      if(this.makePostCall(character)){\r\n         characters[index] = character\r\n         this.setState({\r\n            characters \r\n         })\r\n      }\r\n   }\r\n\r\n   handlePatch = character => {\r\n      this.makePatchCall(character).then( callResult => {\r\n         if (callResult.status === 201) {\r\n            character = callResult.data;\r\n            console.log(character);\r\n            this.setState({ characters: [...this.state.characters, character] });\r\n         }\r\n      });\r\n   }\r\n\r\n   handleCompletedSubmit = complete => {\r\n      this.setState({ completed: [...this.state.completed, complete]});\r\n   }\r\n\r\n   makePostCall(character){\r\n      return axios.post('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   render() {\r\n        const { characters, showModal, modalCharacter } = this.state\r\n\r\n        let mChar = {}\r\n        if (modalCharacter === null) {\r\n            mChar = {\r\n            task: '',\r\n            desc: '',\r\n            priority: '',\r\n            date: \"\", \r\n            checked: false,\r\n            type: '',\r\n            }\r\n        }\r\n        return (\r\n         <div className=\"all\">\r\n\r\n            <div className=\"header\">\r\n               <img className=\"photo\" src={logo} /> \r\n               <h1 className=\"text\"> TO-DO APP </h1>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n               <input type=\"button\" value=\"Add Task\" onClick={this.newCharacter} />\r\n               <Table characterData={characters} removeCharacter={this.removeCharacter} updateCharacter={this.updateCharacter}  openModal={this.openModal} editChecked={this.editChecked} />\r\n               <MyModal show={showModal} handleModalSubmit={this.handleModalSubmit} closeModal={this.closeModal} \r\n               modalCharacter={(modalCharacter ? modalCharacter : mChar)}/>\r\n            </div>\r\n\r\n         </div>\r\n             )\r\n   }\r\n\r\n}\r\n\r\nexport default App\r\n               // <Form handleSubmit={this.handleSubmit} />","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js",["30","31","32","33"],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js",["34"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nclass MyModal extends Component {\r\n\r\n     initialState = {\r\n       task: '',\r\n       desc: '',\r\n       priority: '',\r\n       date: \"\", \r\n       checked: false,\r\n       type: '',\r\n     }\r\n     state = this.initialState\r\n\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n        })\r\n   }\r\n\r\n   // TODO: fix double click bug (if you edit the same task twice this breaks)\r\n   componentDidUpdate({_id}) { // if a new character is given, change the state\r\n    if (this.props.modalCharacter && (this.props.modalCharacter._id !== this.state._id)) {\r\n      this.setState({task: this.props.modalCharacter.task})\r\n      this.setState({desc: this.props.modalCharacter.desc})\r\n      this.setState({priority: this.props.modalCharacter.priority})\r\n      this.setState({type: this.props.modalCharacter.type})\r\n      this.setState({date: this.props.modalCharacter.date})\r\n      this.setState({_id: this.props.modalCharacter._id})\r\n    }\r\n    // if (this.props.modalCharacter === null) { // if a null character is given, reset to initial to create a new character\r\n    // }\r\n   }\r\n\r\n   submitForm = () => {\r\n     let nPriority = parseInt(this.state.priority)\r\n     if (nPriority !== NaN && nPriority >= 0 && nPriority <= 10) { // Check that the priority is valid\r\n      if (this.props.modalCharacter) {\r\n        var modChar = this.props.modalCharacter\r\n        modChar.task = this.state.task\r\n        modChar.desc = this.state.desc\r\n        modChar.priority = this.state.priority\r\n        modChar.type = this.state.type\r\n        modChar.date = this.state.date\r\n        this.props.handleModalSubmit(modChar)\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n      alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n    }\r\n  }\r\n\r\n    render = () => {\r\n\r\n        let defaultType = <option selected disabled>Please choose...</option>  \r\n        if (this.state.type) { // if type is already selected\r\n          defaultType = <option selected name=\"type\" id=\"type\" value={this.state.type}>{this.state.type}</option>\r\n        } // Not ideal, the option will be repeated in the table twice, not sure how to fix\r\n        return (\r\n         <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n         <Modal.Header>\r\n          <Modal.Title>Edit task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={this.state.task}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={this.state.desc}\r\n                   onChange={this.handleChange} />\r\n\r\n\t\t             <label htmlFor=\"date\">Due Date (optional)</label>\r\n                 <input\r\n                   type = \"date\"\r\n                   name = \"date\"\r\n                   id = \"date\"\r\n                   value={this.state.date}\r\n                   onChange={this.handleChange} />\r\n            \r\n                 <label htmlFor=\"type\">Type</label>\r\n                 <select name=\"type\" onChange={this.handleChange}>\r\n                   {defaultType}\r\n                   <option name=\"type\" id=\"type\" value=\"School\">School</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Work\">Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Errand\">Errand</option>\r\n                   <option name=\"type\" id=\"type\" value=\"House Work\">House Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Other\">Other</option>\r\n                 </select> \r\n\r\n                 <label htmlFor=\"priority\">Priority (Number 0-10)</label>\r\n                 <div className=\"slider-parent\">\r\n                   <input\r\n                     type=\"range\"\r\n                     name=\"priority\"\r\n                     id=\"priority\"\r\n                     min=\"0\"\r\n                     max=\"10\"\r\n                     steps=\"1\"\r\n                     value={this.state.priority}\r\n                     onChange={this.handleChange} />\r\n                  <output>{this.state.priority}</output>\r\n                </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={this.submitForm}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n        </Modal>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyModal\r\n\r\n                //  <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                //  <input\r\n                //    type=\"text\"\r\n                //    name=\"priority\"\r\n                //    id=\"priority\"\r\n                //    value={this.state.priority}\r\n                //    onChange={this.handleChange} />\r\n","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js",["35","36"],"import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n     initialState = {\r\n            task: '',\r\n            desc: '',\r\n            date: \"\", \r\n            checked: false,\r\n            type: '',\r\n            priority: '',\r\n          }\r\n\r\n     state = this.initialState\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n             })\r\n   } \r\n\r\n    submitForm = () => {\r\n      let nPriority = parseInt(this.state.priority)\r\n      if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n     }\r\n     else {\r\n         alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n     var date = new Date(this.state.date)\r\n     let year = date.getFullYear()\r\n     if (year !== NaN && ((year % 1000) < 10) && year >= 2021){\r\n       this.props.handleSubmit(this.state)\r\n       this.setState(this.initialState)\r\n     }\r\n     else {\r\n       alert(\"Year must be a valid 4-digit date in the future.\")\r\n     }\r\n   }\r\n\r\n   render() {\r\n        const { task, desc, priority, date } = this.state;\r\n        return (\r\n               <form>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={task}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={desc}\r\n                   onChange={this.handleChange} />\r\n\r\n\t\t <label htmlFor=\"date\">Due Date (optional)</label>\r\n                 <input\r\n                   type = \"date\"\r\n                   name = \"date\"\r\n                   id = \"date\"\r\n                   value={date}\r\n                   onChange={this.handleChange} />\r\n            \r\n                 <label htmlFor=\"type\">Type</label>\r\n                 <select name=\"type\" onChange={this.handleChange}>\r\n                   <option selected disabled>Please choose...</option>\r\n                   <option name=\"type\" id=\"type\" value=\"School\">School</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Work\">Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Errand\">Errand</option>\r\n                   <option name=\"type\" id=\"type\" value=\"House Work\">House Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Other\">Other</option>\r\n                 </select> \r\n\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <div className=\"slider-parent\">\r\n                   <input\r\n                     type=\"range\"\r\n                     name=\"priority\"\r\n                     id=\"priority\"\r\n                     min=\"0\"\r\n                     max=\"10\"\r\n                     steps=\"1\"\r\n                     value={priority}\r\n                     onChange={this.handleChange} />\r\n                  <output>{priority}</output>\r\n                </div>\r\n\r\n                 <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n               </form>\r\n             );\r\n   }\r\n\r\n}\r\n\r\nexport default Form\r\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":4,"column":8,"nodeType":"43","messageId":"44","endLine":4,"endColumn":12},{"ruleId":"45","severity":1,"message":"46","line":197,"column":16,"nodeType":"47","endLine":197,"endColumn":52},{"ruleId":"48","severity":1,"message":"49","line":41,"column":18,"nodeType":"50","messageId":"51","endLine":41,"endColumn":20},{"ruleId":"48","severity":1,"message":"49","line":42,"column":20,"nodeType":"50","messageId":"51","endLine":42,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":47,"column":18,"nodeType":"50","messageId":"51","endLine":47,"endColumn":20},{"ruleId":"48","severity":1,"message":"49","line":53,"column":16,"nodeType":"50","messageId":"51","endLine":53,"endColumn":18},{"ruleId":"52","severity":1,"message":"53","line":42,"column":10,"nodeType":"50","messageId":"54","endLine":42,"endColumn":27},{"ruleId":"52","severity":1,"message":"53","line":25,"column":11,"nodeType":"50","messageId":"54","endLine":25,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":32,"column":10,"nodeType":"50","messageId":"54","endLine":32,"endColumn":22},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation"]