[{"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js":"1","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js":"2","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js":"3","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js":"4","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js":"5"},{"size":169,"mtime":1613525475045,"results":"6","hashOfConfig":"7"},{"size":5399,"mtime":1614549914959,"results":"8","hashOfConfig":"7"},{"size":4426,"mtime":1614552161976,"results":"9","hashOfConfig":"7"},{"size":3063,"mtime":1614549914961,"results":"10","hashOfConfig":"7"},{"size":2828,"mtime":1614551586944,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1if9kux",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js",[],["25","26"],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js",[],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js",["27","28"],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js",["29"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nclass MyModal extends Component {\r\n\r\n     initialState = {\r\n       task: '',\r\n       desc: '',\r\n       priority: ''\r\n     }\r\n     state = this.initialState\r\n\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n        })\r\n   }\r\n\r\n   // TODO: fix double click bug (if you edit the same task twice this breaks)\r\n   componentDidUpdate({_id}) { // if a new character is given, change the state\r\n    if (this.props.modalCharacter && (this.props.modalCharacter._id !== this.state._id)) {\r\n      this.setState({task: this.props.modalCharacter.task})\r\n      this.setState({desc: this.props.modalCharacter.desc})\r\n      this.setState({priority: this.props.modalCharacter.priority})\r\n      this.setState({_id: this.props.modalCharacter._id})\r\n    }\r\n   }\r\n\r\n   submitForm = () => {\r\n     let nPriority = parseInt(this.state.priority)\r\n     if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n      if (this.props.modalCharacter) {\r\n        var modChar = this.props.modalCharacter\r\n        modChar.task = this.state.task\r\n        modChar.desc = this.state.desc\r\n        modChar.priority = this.state.priority\r\n        this.props.handleModalSubmit(modChar)\r\n        }\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n      alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n    }\r\n\r\n    render = () => {\r\n        // const { task, desc, priority, show } = this.state;\r\n\r\n        return (\r\n         <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n         <Modal.Header>\r\n          <Modal.Title>Edit task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={this.state.task}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={this.state.desc}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={this.state.priority}\r\n                   onChange={this.handleChange} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={this.submitForm}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n        </Modal>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyModal\r\n","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js",["30"],"import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n     initialState = {\r\n            task: '',\r\n            desc: '',\r\n            date: \"\", \r\n            checked: false,\r\n            type: '',\r\n            priority: '',\r\n          }\r\n\r\n     state = this.initialState\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n             })\r\n   } \r\n\r\n    submitForm = () => {\r\n      let nPriority = parseInt(this.state.priority)\r\n      if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n         alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n   }\r\n\r\n   render() {\r\n        const { task, desc, priority, date } = this.state;\r\n\r\n        return (\r\n               <form>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={task}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={desc}\r\n                   onChange={this.handleChange} />\r\n\r\n\t\t             <label htmlFor=\"date\">Due Date (optional)</label>\r\n                 <input\r\n                   type = \"datetime-local\"\r\n                   name = \"date\"\r\n                   id = \"date\"\r\n                   value={date}\r\n                   onChange={this.handleChange} />\r\n            \r\n                 <label htmlFor=\"type\">Type</label>\r\n                 <select name=\"type\" onChange={this.handleChange}>\r\n                   <option selected disabled>Please choose...</option>  <option name=\"type\" id=\"type\" value=\"School\">School</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Work\">Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Errand\">Errand</option>\r\n                   <option name=\"type\" id=\"type\" value=\"House Work\">House Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Other\">Other</option>\r\n                 </select> \r\n\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={priority}\r\n                   onChange={this.handleChange} />\r\n                  <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n               </form>\r\n             );\r\n   }\r\n\r\n}\r\n\r\nexport default Form\r\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":80,"column":20,"nodeType":"37","messageId":"38","endLine":80,"endColumn":22},{"ruleId":"35","severity":1,"message":"36","line":86,"column":20,"nodeType":"37","messageId":"38","endLine":86,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":35,"column":10,"nodeType":"37","messageId":"41","endLine":35,"endColumn":27},{"ruleId":"39","severity":1,"message":"40","line":25,"column":11,"nodeType":"37","messageId":"41","endLine":25,"endColumn":28},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation"]