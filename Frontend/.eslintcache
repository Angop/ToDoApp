[{"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\index.js":"1","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\App.js":"2","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Table.js":"3","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Modal.js":"4"},{"size":174,"mtime":1615229405511,"results":"5","hashOfConfig":"6"},{"size":6128,"mtime":1615229741915,"results":"7","hashOfConfig":"6"},{"size":3892,"mtime":1615229434467,"results":"8","hashOfConfig":"6"},{"size":4589,"mtime":1615229405507,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d01q7l",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\index.js",[],"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\App.js",["20"],"D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Table.js",["21","22","23","24"],"import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nconst Checkboxes = ({ checked, cbOnChange }) => {\r\n  const handleChange = (event) => {\r\n    cbOnChange(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        onChange={handleChange}\r\n        checked={checked}\r\n        color=\"primary\"\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TableHeader = () => {\r\n\t  return (\r\n\t\t      <thead>\r\n\t\t        <tr>\r\n              <th>Select</th>\r\n\t            <th>Tasks</th>\r\n              <th>Description</th>\r\n              <th>Due Date</th>\r\n              <th>Type</th>\r\n              <th style={{width: '10%'}}>Priority</th>\r\n              <th></th>\r\n\t\t        </tr>\r\n\t\t      </thead>\r\n\t\t    ) // style width ensures the priority bar displays correctly\r\n}\r\n\r\nconst TableBody = props => {\r\n    props.characterData.sort((a,b) => {\r\n      if (a.date == ''){\r\n        if (b.date == ''){\r\n          return (b.priority - a.priority)\r\n        }\r\n        return -1;\r\n      }\r\n      if (b.date == ''){\r\n        return 1;\r\n      }\r\n      var dateA = new Date(a.date)\r\n      const dateB = new Date(b.date)\r\n      const diff = (dateA.valueOf() - dateB.valueOf())\r\n      if (diff == 0){\r\n        return (b.priority - a.priority)\r\n      }\r\n      return diff\r\n    })\r\n\t  const rows = props.characterData.map((row, index) => {\r\n      var formattedDate = null\r\n      if (row.date.length && row.date.length > 0){\r\n        const date = new Date(row.date)\r\n        const month = date.getMonth() + 1\r\n\r\n        formattedDate = month.toString().concat('/',date.getDate()+1,'/',date.getFullYear())\r\n      }\r\n      let textLine = (row.checked === true ? 'line-through' : 'none')\r\n      let priBar = parseInt(row.priority) * 10\r\n      let priVar = (priBar > 66 ? \"danger\" : (priBar > 33 ? \"warning\" : \"success\"))\r\n\t\t      return (\r\n               <tr key={index}>\r\n                 <td>\r\n                 <td>\r\n                    <Checkboxes \r\n                      checked={row.checked} \r\n                      cbOnChange={()=> props.editChecked(index)} \r\n                    />\r\n                 </td>\r\n                 </td>\r\n                 \r\n                 <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.task}\r\n                  </div>\r\n                 </td>\r\n        <td>\r\n          <div style={{ textDecorationLine: textLine }}>{row.desc}</div>\r\n        </td>\r\n\r\n        <td>\r\n          <div style={{ textDecorationLine: textLine }}>{formattedDate}</div>\r\n        </td>\r\n\r\n        <td>\r\n          <div style={{ textDecorationLine: textLine }}>{row.type}</div>\r\n        </td>\r\n        <td>\r\n          <ProgressBar striped variant={priVar} now={priBar} />\r\n        </td>\r\n        <td>\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Edit\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => props.removeCharacter(index)}>\r\n                Delete\r\n              </Dropdown.Item>\r\n              <Dropdown.Item onClick={() => props.openModal(index)}>\r\n                Edit Task\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nconst Table = (props) => {\r\n  const { characterData, removeCharacter, openModal, editChecked } = props;\r\n\r\n  return (\r\n    <table style={{ width: \"100%\" }}>\r\n      <TableHeader />\r\n      <TableBody\r\n        characterData={characterData}\r\n        removeCharacter={removeCharacter}\r\n        openModal={openModal}\r\n        editChecked={editChecked}\r\n      />\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","D:\\College\\2020\\Winter\\CSC307\\todo_app\\ToDoApp\\Frontend\\src\\Modal.js",["25"],"import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass MyModal extends Component {\r\n  initialState = {\r\n    task: \"\",\r\n    desc: \"\",\r\n    priority: \"0\",\r\n    date: \"\",\r\n    checked: false,\r\n    type: \"\",\r\n  };\r\n  state = this.initialState;\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate({ _id }) {\r\n    // if a new character is given, change the state\r\n    if (\r\n      this.props.modalCharacter &&\r\n      this.props.modalCharacter._id !== this.state._id\r\n    ) {\r\n      this.setState({ task: this.props.modalCharacter.task });\r\n      this.setState({ desc: this.props.modalCharacter.desc });\r\n      this.setState({ priority: this.props.modalCharacter.priority });\r\n      this.setState({ type: this.props.modalCharacter.type });\r\n      this.setState({ date: this.props.modalCharacter.date });\r\n      this.setState({ _id: this.props.modalCharacter._id });\r\n    }\r\n  }\r\n\r\n  submitForm = () => {\r\n    let nPriority = parseInt(this.state.priority);\r\n    if (nPriority !== NaN && nPriority >= 0 && nPriority <= 10) {\r\n      // Check that the priority is valid\r\n      if (this.props.modalCharacter) {\r\n        var modChar = this.props.modalCharacter;\r\n        modChar.task = this.state.task;\r\n        modChar.desc = this.state.desc;\r\n        modChar.priority = this.state.priority;\r\n        modChar.type = this.state.type;\r\n        modChar.date = this.state.date;\r\n        this.props.handleModalSubmit(modChar);\r\n        this.setState(this.initialState);\r\n      } else {\r\n        alert(\"Priority must be a number from 1 to 10.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    let defaultType = (\r\n      <option selected disabled>\r\n        Please choose...\r\n      </option>\r\n    );\r\n    if (this.state.type) {\r\n      // if type is already selected\r\n      defaultType = (\r\n        <option selected name=\"type\" id=\"type\" value={this.state.type}>\r\n          {this.state.type}\r\n        </option>\r\n      );\r\n    } // Not ideal, the selected option will be repeated in the table twice\r\n    return (\r\n      <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Edit task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <label htmlFor=\"task\">Task</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"task\"\r\n            id=\"task\"\r\n            value={this.state.task}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label htmlFor=\"desc\">Description</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"desc\"\r\n            id=\"desc\"\r\n            value={this.state.desc}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label htmlFor=\"date\">Due Date (optional)</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            id=\"date\"\r\n            value={this.state.date}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label htmlFor=\"type\">Type</label>\r\n          <select name=\"type\" onChange={this.handleChange}>\r\n            {defaultType}\r\n            <option name=\"type\" id=\"type\" value=\"School\">\r\n              School\r\n            </option>\r\n            <option name=\"type\" id=\"type\" value=\"Work\">\r\n              Work\r\n            </option>\r\n            <option name=\"type\" id=\"type\" value=\"Errand\">\r\n              Errand\r\n            </option>\r\n            <option name=\"type\" id=\"type\" value=\"House Work\">\r\n              House Work\r\n            </option>\r\n            <option name=\"type\" id=\"type\" value=\"Other\">\r\n              Other\r\n            </option>\r\n          </select>\r\n\r\n          <label htmlFor=\"priority\">Priority (Number 0-10)</label>\r\n          <div className=\"slider-parent\">\r\n            <input\r\n              type=\"range\"\r\n              name=\"priority\"\r\n              id=\"priority\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              steps=\"1\"\r\n              value={this.state.priority}\r\n              onChange={this.handleChange}\r\n            />\r\n            <output>{this.state.priority}</output>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={this.submitForm}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n}\r\n\r\nexport default MyModal;",{"ruleId":"26","severity":1,"message":"27","line":201,"column":11,"nodeType":"28","endLine":201,"endColumn":47},{"ruleId":"29","severity":1,"message":"30","line":41,"column":18,"nodeType":"31","messageId":"32","endLine":41,"endColumn":20},{"ruleId":"29","severity":1,"message":"30","line":42,"column":20,"nodeType":"31","messageId":"32","endLine":42,"endColumn":22},{"ruleId":"29","severity":1,"message":"30","line":47,"column":18,"nodeType":"31","messageId":"32","endLine":47,"endColumn":20},{"ruleId":"29","severity":1,"message":"30","line":53,"column":16,"nodeType":"31","messageId":"32","endLine":53,"endColumn":18},{"ruleId":"33","severity":1,"message":"34","line":41,"column":9,"nodeType":"31","messageId":"35","endLine":41,"endColumn":26},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN"]