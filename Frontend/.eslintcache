[{"C:\\Users\\user01\\react-assignment1\\src\\index.js":"1","C:\\Users\\user01\\react-assignment1\\src\\App.js":"2","C:\\Users\\user01\\react-assignment1\\src\\Table.js":"3","C:\\Users\\user01\\react-assignment1\\src\\Form.js":"4","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\index.js":"5","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\App.js":"6","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Table.js":"7","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Form.js":"8","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Modal.js":"9"},{"size":167,"mtime":1609974705664,"results":"10","hashOfConfig":"11"},{"size":2017,"mtime":1612998723958,"results":"12","hashOfConfig":"11"},{"size":950,"mtime":1612998728843,"results":"13","hashOfConfig":"11"},{"size":1284,"mtime":1612999246618,"results":"14","hashOfConfig":"11"},{"size":169,"mtime":1613000177960,"results":"15","hashOfConfig":"16"},{"size":5514,"mtime":1614641071602,"results":"17","hashOfConfig":"16"},{"size":4430,"mtime":1614554554034,"results":"18","hashOfConfig":"16"},{"size":2828,"mtime":1614552245299,"results":"19","hashOfConfig":"16"},{"size":3063,"mtime":1614548223308,"results":"20","hashOfConfig":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"hqw4c6",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1q7fa39",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},"C:\\Users\\user01\\react-assignment1\\src\\index.js",[],["45","46"],"C:\\Users\\user01\\react-assignment1\\src\\App.js",[],"C:\\Users\\user01\\react-assignment1\\src\\Table.js",[],"C:\\Users\\user01\\react-assignment1\\src\\Form.js",[],"C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\index.js",[],["47","48"],"C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\App.js",["49"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Table from './Table'\r\nimport Form from './Form'\r\nimport MyModal from './Modal';\r\nimport logo from './logo.jpg';\r\nimport \"./styles.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nclass App extends Component {\r\n\t  state = {\r\n        characters: [],\r\n        completed:[],\r\n        showModal: false,\r\n        setCharacter: false, // tells modal.js it has a new character\r\n        modalCharacter: null\r\n     }\r\n\r\n\r\n   componentDidMount() {\r\n      axios.get('http://localhost:5000/users')\r\n         .then(res => {\r\n            const characters = res.data.users_list;\r\n            this.setState({ characters });\r\n         })\r\n         .catch(function (error) {\r\n            //Not handling the error. Just logging into the console.\r\n            console.log(error);\r\n         });\r\n   }\r\n\r\n   removeCharacter = index => {\r\n      const { characters } = this.state\r\n      let character = characters[index];\r\n\r\n      if(this.makeDeleteCall(character)){\r\n          this.setState({\r\n              characters: characters.filter((character, i) => {\r\n                  return i !== index\r\n              }),\r\n          })\r\n      }\r\n   }\r\n\r\n   openModal = index => {\r\n      const { characters } = this.state\r\n      this.setState({ modalCharacter: characters[index] });\r\n      this.setState({ showModal: true });\r\n      this.setState({ setCharacter : true });\r\n   }\r\n\r\n   closeModal = () => {\r\n      this.setState({ modalCharacter: null });\r\n      this.setState({ showModal: false});\r\n   }\r\n\r\n   handleModalSubmit = character => {\r\n      // this.handleSubmit(character);\r\n      this.updateCharacter(character)\r\n      this.closeModal()\r\n   }\r\n\r\n   updateCharacter = character => {\r\n      const { characters } = this.state\r\n\r\n      if(this.makePutCall(character)){\r\n         var updatedCharacters = []\r\n         for (let i=0; i<characters.length; i++) { // get an updated character list\r\n            if (character._id === characters[i]._id) {\r\n               updatedCharacters.push(character)\r\n            }\r\n            else {\r\n               updatedCharacters.push(characters[i])\r\n            }\r\n         }\r\n         console.log(characters)\r\n         console.log(updatedCharacters)\r\n         this.setState({\r\n            characters: updatedCharacters\r\n         })\r\n      }\r\n   }\r\n\r\n   makePutCall(character){\r\n      return axios.put('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   makeDeleteCall(character){\r\n      console.log(character);\r\n      console.log({ data: { _id: character._id } });\r\n      return axios.delete('http://localhost:5000/users', { data: { _id: character._id } })\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response === 200;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return false;\r\n         });\r\n   }\r\n\r\n   handleSubmit = character => {\r\n      console.log(character)\r\n      this.makePostCall(character).then( callResult => {\r\n         if (callResult.status === 201) {\r\n            character = callResult.data;\r\n            console.log(character);\r\n            this.setState({ characters: [...this.state.characters, character] });\r\n         }\r\n      });\r\n   }\r\n\r\n   editChecked = index => {\r\n      const { characters } = this.state\r\n      let character = characters[index]; \r\n      character.checked = !character.checked\r\n\r\n      console.log(character)\r\n      \r\n      if(this.makePostCall(character)){\r\n         characters[index] = character\r\n         this.setState({\r\n            characters \r\n         })\r\n      }\r\n   }\r\n\r\n   handlePatch = character => {\r\n      this.makePatchCall(character).then( callResult => {\r\n         if (callResult.status === 201) {\r\n            character = callResult.data;\r\n            console.log(character);\r\n            this.setState({ characters: [...this.state.characters, character] });\r\n         }\r\n      });\r\n   }\r\n\r\n   handleCompletedSubmit = complete => {\r\n      this.setState({ completed: [...this.state.completed, complete]});\r\n   }\r\n\r\n   makePostCall(character){\r\n      return axios.post('http://localhost:5000/users', character)\r\n         .then(function (response) {\r\n            console.log(response);\r\n            return response;\r\n         })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n            return null;\r\n         });\r\n   }\r\n\r\n   render() {\r\n        const { characters, showModal, setCharacter, modalCharacter } = this.state\r\n\r\n        return (\r\n         <div className=\"all\">\r\n\r\n            <div className=\"header\">\r\n               <img className=\"photo\" src={logo} /> \r\n               <h1 className=\"text\"> TO-DO APP </h1>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n               <Table characterData={characters} removeCharacter={this.removeCharacter} updateCharacter={this.updateCharacter}  openModal={this.openModal} editChecked={this.editChecked} />\r\n               <Form handleSubmit={this.handleSubmit} />\r\n               <MyModal show={showModal} newCharacter={setCharacter} handleModalSubmit={this.handleModalSubmit} closeModal={this.closeModal} \r\n               modalCharacter={modalCharacter}/>\r\n            </div>\r\n\r\n         </div>\r\n             )\r\n   }\r\n\r\n}\r\n\r\nexport default App","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Table.js",["50","51"],"import React from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\n\r\nconst Checkboxes = ({checked, cbOnChange})=> {\r\n  const handleChange = (event) => {\r\n      cbOnChange(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        onChange={handleChange}\r\n        checked={checked}\r\n        color=\"primary\"\r\n        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n      />\r\n      </div>\r\n  );\r\n}\r\n\r\nconst TableHeader = () => {\r\n\t  return (\r\n\t\t      <thead>\r\n\t\t        <tr>\r\n              <th>Select</th>\r\n\t      <th>Tasks</th>\r\n              <th>Description</th>\r\n              <th>Type</th>\r\n              <th>Date</th>\r\n              <th style={{width: '10%'}}>Priority</th>\r\n\t\t        </tr>\r\n\t\t      </thead>\r\n\t\t    ) // style width ensures the priority bar displays correctly\r\n}\r\n\r\nconst days = [\r\n  'Sunday ',\r\n  'Monday ',\r\n  'Tuesday ',\r\n  'Wednesday ',\r\n  'Thursday ',\r\n  'Friday ',\r\n  'Saturday '\r\n]\r\n\r\nconst months = [\r\n  'January ',\r\n  'February ',\r\n  'March ',\r\n  'April ',\r\n  'May ',\r\n  'June ',\r\n  'July ',\r\n  'August ',\r\n  'September ',\r\n  'October ',\r\n  'November ',\r\n  'December '\r\n]\r\n\r\nconst TableBody = props => {\r\n\t  const rows = props.characterData.map((row, index) => {\r\n      var formattedDate = null\r\n      if (row.date.length && row.date.length > 0){\r\n        const date = new Date(row.date)\r\n        const dayName = days[date.getDay()]\r\n        const monthName = months[date.getMonth()]\r\n        var minutes = date.getMinutes()\r\n        var minuteString = minutes.toString()\r\n        if (minutes < 10){\r\n          const zero = '0'\r\n          minuteString = zero.concat(minuteString)\r\n        }\r\n        var hour = date.getHours()\r\n        var formattedHour = null\r\n        if (hour > 11){\r\n          hour = hour - 12\r\n          if (hour == 0){\r\n            hour = 12\r\n          }\r\n          formattedHour = hour.toString().concat(':',minuteString,' PM')\r\n        }\r\n        else{\r\n          if (hour == 0){\r\n            hour = 12\r\n          }\r\n          formattedHour = hour.toString().concat(':',minuteString,' AM')\r\n        }\r\n        formattedDate = dayName.concat(monthName,date.getDate(),', ',date.getFullYear(),' at ', formattedHour)//date.getHours(),\":\",date.getMinutes())\r\n      }\r\n      let textLine = (row.checked === true ? 'line-through' : 'none')\r\n      let priBar = parseInt(row.priority) * 10\r\n      let priVar = (priBar > 66 ? \"danger\" : (priBar > 33 ? \"warning\" : \"success\"))\r\n\t\t      return (\r\n               <tr key={index}>\r\n                 <td>\r\n                    <Checkboxes cbOnChange={(checked)=> props.editChecked(index)} />\r\n                 </td>\r\n                 \r\n                 <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.task}\r\n                  </div>\r\n                 </td>\r\n\r\n                 <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.desc}\r\n                  </div>\r\n                </td>\r\n\r\n                <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.type}\r\n                  </div>\r\n                </td>\r\n                <td>{formattedDate}</td>\r\n                 <td><ProgressBar striped variant={priVar} now={priBar} /></td>\r\n                 <td>\r\n                  <Dropdown>\r\n                      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                          Edit\r\n                      </Dropdown.Toggle>\r\n\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => props.removeCharacter(index)}>Delete</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => props.openModal(index)}>Edit Task</Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                 </td>\r\n               </tr>\r\n\t\t\t          )\r\n\t\t    })\r\n\t  return <tbody>{rows}</tbody>\r\n}\r\n\r\nconst Table = props => {\r\n     const { characterData, removeCharacter, openModal, editChecked} = props\r\n\r\n     return (\r\n            <table style={{width: '100%'}}>\r\n              <TableHeader />\r\n              <TableBody characterData={characterData} removeCharacter={removeCharacter} openModal={openModal} editChecked={editChecked}/>\r\n            </table>\r\n          )\r\n}\r\n\r\nexport default Table\r\n","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Form.js",["52"],"import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n     initialState = {\r\n            task: '',\r\n            desc: '',\r\n            date: \"\", \r\n            checked: false,\r\n            type: '',\r\n            priority: '',\r\n          }\r\n\r\n     state = this.initialState\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n             })\r\n   } \r\n\r\n    submitForm = () => {\r\n      let nPriority = parseInt(this.state.priority)\r\n      if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n         alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n   }\r\n\r\n   render() {\r\n        const { task, desc, priority, date } = this.state;\r\n\r\n        return (\r\n               <form>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={task}\r\n                   onChange={this.handleChange} />\r\n\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={desc}\r\n                   onChange={this.handleChange} />\r\n\r\n\t\t             <label htmlFor=\"date\">Due Date (optional)</label>\r\n                 <input\r\n                   type = \"datetime-local\"\r\n                   name = \"date\"\r\n                   id = \"date\"\r\n                   value={date}\r\n                   onChange={this.handleChange} />\r\n            \r\n                 <label htmlFor=\"type\">Type</label>\r\n                 <select name=\"type\" onChange={this.handleChange}>\r\n                   <option selected disabled>Please choose...</option>  <option name=\"type\" id=\"type\" value=\"School\">School</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Work\">Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Errand\">Errand</option>\r\n                   <option name=\"type\" id=\"type\" value=\"House Work\">House Work</option>\r\n                   <option name=\"type\" id=\"type\" value=\"Other\">Other</option>\r\n                 </select> \r\n\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={priority}\r\n                   onChange={this.handleChange} />\r\n                  <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n               </form>\r\n             );\r\n   }\r\n\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\user01\\Documents\\GitHub\\ToDoApp\\Frontend\\src\\Modal.js",["53"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nclass MyModal extends Component {\r\n\r\n     initialState = {\r\n       task: '',\r\n       desc: '',\r\n       priority: ''\r\n     }\r\n     state = this.initialState\r\n\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n        })\r\n   }\r\n\r\n   // TODO: fix double click bug (if you edit the same task twice this breaks)\r\n   componentDidUpdate({_id}) { // if a new character is given, change the state\r\n    if (this.props.modalCharacter && (this.props.modalCharacter._id !== this.state._id)) {\r\n      this.setState({task: this.props.modalCharacter.task})\r\n      this.setState({desc: this.props.modalCharacter.desc})\r\n      this.setState({priority: this.props.modalCharacter.priority})\r\n      this.setState({_id: this.props.modalCharacter._id})\r\n    }\r\n   }\r\n\r\n   submitForm = () => {\r\n     let nPriority = parseInt(this.state.priority)\r\n     if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n      if (this.props.modalCharacter) {\r\n        var modChar = this.props.modalCharacter\r\n        modChar.task = this.state.task\r\n        modChar.desc = this.state.desc\r\n        modChar.priority = this.state.priority\r\n        this.props.handleModalSubmit(modChar)\r\n        }\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n      alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n    }\r\n\r\n    render = () => {\r\n        // const { task, desc, priority, show } = this.state;\r\n\r\n        return (\r\n         <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n         <Modal.Header>\r\n          <Modal.Title>Edit task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={this.state.task}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={this.state.desc}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={this.state.priority}\r\n                   onChange={this.handleChange} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={this.submitForm}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n        </Modal>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyModal\r\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":169,"column":16,"nodeType":"62","endLine":169,"endColumn":52},{"ruleId":"63","severity":1,"message":"64","line":80,"column":20,"nodeType":"65","messageId":"66","endLine":80,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":86,"column":20,"nodeType":"65","messageId":"66","endLine":86,"endColumn":22},{"ruleId":"67","severity":1,"message":"68","line":25,"column":11,"nodeType":"65","messageId":"69","endLine":25,"endColumn":28},{"ruleId":"67","severity":1,"message":"68","line":35,"column":10,"nodeType":"65","messageId":"69","endLine":35,"endColumn":27},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation"]