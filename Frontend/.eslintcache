[{"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js":"1","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js":"2","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js":"3","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js":"4","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js":"5"},{"size":169,"mtime":1613525475045,"results":"6","hashOfConfig":"7"},{"size":5399,"mtime":1614549914959,"results":"8","hashOfConfig":"7"},{"size":4229,"mtime":1614551113719,"results":"9","hashOfConfig":"7"},{"size":3063,"mtime":1614549914961,"results":"10","hashOfConfig":"7"},{"size":2828,"mtime":1614551586944,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1if9kux",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\index.js",[],["25","26"],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\App.js",[],"C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Table.js",["27","28"],"import React from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\n\r\nconst Checkboxes = ({checked, cbOnChange})=> {\r\n  const handleChange = (event) => {\r\n      cbOnChange(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox\r\n        onChange={handleChange}\r\n        checked={checked}\r\n        color=\"primary\"\r\n        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n      />\r\n      </div>\r\n  );\r\n}\r\n\r\nconst TableHeader = () => {\r\n\t  return (\r\n\t\t      <thead>\r\n\t\t        <tr>\r\n              <th>Select</th>\r\n\t      <th>Tasks</th>\r\n              <th>Description</th>\r\n              <th>Type</th>\r\n              <th style={{width: '10%'}}>Priority</th>\r\n              <th></th>\r\n\t\t        </tr>\r\n\t\t      </thead>\r\n\t\t    ) // style width ensures the priority bar displays correctly\r\n}\r\n\r\nconst days = [\r\n  'Sunday ',\r\n  'Monday ',\r\n  'Tuesday ',\r\n  'Wednesday ',\r\n  'Thursday ',\r\n  'Friday ',\r\n  'Saturday '\r\n]\r\n\r\nconst months = [\r\n  'January ',\r\n  'February ',\r\n  'March ',\r\n  'April ',\r\n  'May ',\r\n  'June ',\r\n  'July ',\r\n  'August ',\r\n  'September ',\r\n  'October ',\r\n  'November ',\r\n  'December '\r\n]\r\n\r\nconst TableBody = props => {\r\n\t  const rows = props.characterData.map((row, index) => {\r\n      var formattedDate = null\r\n      if (row.date.length && row.date.length > 0){\r\n        const date = new Date(row.date)\r\n        const dayName = days[date.getDay()]\r\n        const monthName = months[date.getMonth()]\r\n        var hour = date.getHours()\r\n        var formattedHour = null\r\n        if (hour > 11){\r\n          hour = hour - 12\r\n          if (hour == 0){\r\n            hour = 12\r\n          }\r\n          formattedHour = hour.toString().concat(':',date.getMinutes(),' PM')\r\n        }\r\n        else{\r\n          if (hour == 0){\r\n            hour = 12\r\n          }\r\n          formattedHour = hour.toString().concat(':',date.getMinutes(),' AM')\r\n        }\r\n        formattedDate = dayName.concat(monthName,date.getDate(),', ',date.getFullYear(),' at ', formattedHour)//date.getHours(),\":\",date.getMinutes())\r\n      }\r\n      let textLine = (row.checked === true ? 'line-through' : 'none')\r\n      let priBar = parseInt(row.priority) * 10\r\n      let priVar = (priBar > 66 ? \"danger\" : (priBar > 33 ? \"warning\" : \"success\"))\r\n\t\t      return (\r\n               <tr key={index}>\r\n                 <td>\r\n                    <Checkboxes cbOnChange={(checked)=> props.editChecked(index)} />\r\n                 </td>\r\n                 \r\n                 <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.task}\r\n                  </div>\r\n                 </td>\r\n\r\n                 <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.desc}\r\n                  </div>\r\n                </td>\r\n\r\n                <td>\r\n                  <div style={{textDecorationLine: textLine}}>\r\n                    {row.type}\r\n                  </div>\r\n                </td>\r\n                <td>{formattedDate}</td>\r\n                 <td><ProgressBar striped variant={priVar} now={priBar} /></td>\r\n                 <td>\r\n                  <Dropdown>\r\n                      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                          Edit\r\n                      </Dropdown.Toggle>\r\n\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => props.removeCharacter(index)}>Delete</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => props.openModal(index)}>Edit Task</Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                 </td>\r\n               </tr>\r\n\t\t\t          )\r\n\t\t    })\r\n\t  return <tbody>{rows}</tbody>\r\n}\r\n\r\nconst Table = props => {\r\n     const { characterData, removeCharacter, openModal, editChecked} = props\r\n\r\n     return (\r\n            <table style={{width: '100%'}}>\r\n              <TableHeader />\r\n              <TableBody characterData={characterData} removeCharacter={removeCharacter} openModal={openModal} editChecked={editChecked}/>\r\n            </table>\r\n          )\r\n}\r\n\r\nexport default Table\r\n","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Modal.js",["29"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nclass MyModal extends Component {\r\n\r\n     initialState = {\r\n       task: '',\r\n       desc: '',\r\n       priority: ''\r\n     }\r\n     state = this.initialState\r\n\r\n\r\n   handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n               [name]: value,\r\n        })\r\n   }\r\n\r\n   // TODO: fix double click bug (if you edit the same task twice this breaks)\r\n   componentDidUpdate({_id}) { // if a new character is given, change the state\r\n    if (this.props.modalCharacter && (this.props.modalCharacter._id !== this.state._id)) {\r\n      this.setState({task: this.props.modalCharacter.task})\r\n      this.setState({desc: this.props.modalCharacter.desc})\r\n      this.setState({priority: this.props.modalCharacter.priority})\r\n      this.setState({_id: this.props.modalCharacter._id})\r\n    }\r\n   }\r\n\r\n   submitForm = () => {\r\n     let nPriority = parseInt(this.state.priority)\r\n     if (nPriority !== NaN && nPriority > 0 && nPriority <= 10) { // Check that the priority is valid\r\n      if (this.props.modalCharacter) {\r\n        var modChar = this.props.modalCharacter\r\n        modChar.task = this.state.task\r\n        modChar.desc = this.state.desc\r\n        modChar.priority = this.state.priority\r\n        this.props.handleModalSubmit(modChar)\r\n        }\r\n        this.setState(this.initialState)\r\n     }\r\n     else {\r\n      alert(\"Priority must be a number from 1 to 10.\")\r\n     }\r\n    }\r\n\r\n    render = () => {\r\n        // const { task, desc, priority, show } = this.state;\r\n\r\n        return (\r\n         <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n         <Modal.Header>\r\n          <Modal.Title>Edit task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n                 <label htmlFor=\"task\">Task</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"task\"\r\n                   id=\"task\"\r\n                   value={this.state.task}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"desc\">Description</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"desc\"\r\n                   id=\"desc\"\r\n                   value={this.state.desc}\r\n                   onChange={this.handleChange} />\r\n                 <label htmlFor=\"priority\">Priority (Number 1-10)</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"priority\"\r\n                   id=\"priority\"\r\n                   value={this.state.priority}\r\n                   onChange={this.handleChange} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={this.submitForm}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n        </Modal>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyModal\r\n","C:\\Users\\zackr\\307\\ToDoApp\\Frontend\\src\\Form.js",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":74,"column":20,"nodeType":"37","messageId":"38","endLine":74,"endColumn":22},{"ruleId":"35","severity":1,"message":"36","line":80,"column":20,"nodeType":"37","messageId":"38","endLine":80,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":35,"column":10,"nodeType":"37","messageId":"41","endLine":35,"endColumn":27},{"ruleId":"39","severity":1,"message":"40","line":25,"column":11,"nodeType":"37","messageId":"41","endLine":25,"endColumn":28},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation"]